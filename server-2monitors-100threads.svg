<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="150" onload="init(evt)" viewBox="0 0 1200 150" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="150" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="133.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="133.00"> </text><svg id="frames" x="10" width="1180" total_samples="5442"><g><title>[libc-2.33.so] (23 samples, 0.42%)</title><rect x="0.0000%" y="69" width="0.4226%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="23"/><text x="0.2500%" y="79.50"></text></g><g><title>[libpthread-2.33.so] (24 samples, 0.44%)</title><rect x="0.4226%" y="69" width="0.4410%" height="15" fill="rgb(217,0,24)" fg:x="23" fg:w="24"/><text x="0.6726%" y="79.50"></text></g><g><title>_IO_new_do_write (2 samples, 0.04%)</title><rect x="0.8637%" y="69" width="0.0368%" height="15" fill="rgb(221,193,54)" fg:x="47" fg:w="2"/><text x="1.1137%" y="79.50"></text></g><g><title>_IO_new_file_write (9 samples, 0.17%)</title><rect x="0.9004%" y="69" width="0.1654%" height="15" fill="rgb(248,212,6)" fg:x="49" fg:w="9"/><text x="1.1504%" y="79.50"></text></g><g><title>_IO_new_file_xsputn (46 samples, 0.85%)</title><rect x="1.0658%" y="69" width="0.8453%" height="15" fill="rgb(208,68,35)" fg:x="58" fg:w="46"/><text x="1.3158%" y="79.50"></text></g><g><title>_Unwind_Find_FDE (1 samples, 0.02%)</title><rect x="1.9111%" y="69" width="0.0184%" height="15" fill="rgb(232,128,0)" fg:x="104" fg:w="1"/><text x="2.1611%" y="79.50"></text></g><g><title>_Unwind_Find_registered_FDE (1 samples, 0.02%)</title><rect x="1.9111%" y="53" width="0.0184%" height="15" fill="rgb(207,160,47)" fg:x="104" fg:w="1"/><text x="2.1611%" y="63.50"></text></g><g><title>_Unwind_ForcedUnwind (3 samples, 0.06%)</title><rect x="1.9294%" y="69" width="0.0551%" height="15" fill="rgb(228,23,34)" fg:x="105" fg:w="3"/><text x="2.1794%" y="79.50"></text></g><g><title>_Unwind_ForcedUnwind_Phase2 (1 samples, 0.02%)</title><rect x="1.9846%" y="69" width="0.0184%" height="15" fill="rgb(218,30,26)" fg:x="108" fg:w="1"/><text x="2.2346%" y="79.50"></text></g><g><title>_Unwind_IteratePhdrCallback (8 samples, 0.15%)</title><rect x="2.0029%" y="69" width="0.1470%" height="15" fill="rgb(220,122,19)" fg:x="109" fg:w="8"/><text x="2.2529%" y="79.50"></text></g><g><title>get_fde_encoding (2 samples, 0.04%)</title><rect x="2.1132%" y="53" width="0.0368%" height="15" fill="rgb(250,228,42)" fg:x="115" fg:w="2"/><text x="2.3632%" y="63.50"></text></g><g><title>get_cie (2 samples, 0.04%)</title><rect x="2.1132%" y="37" width="0.0368%" height="15" fill="rgb(240,193,28)" fg:x="115" fg:w="2"/><text x="2.3632%" y="47.50"></text></g><g><title>__GI__IO_fflush (12 samples, 0.22%)</title><rect x="2.1499%" y="69" width="0.2205%" height="15" fill="rgb(216,20,37)" fg:x="117" fg:w="12"/><text x="2.3999%" y="79.50"></text></g><g><title>__GI__IO_file_overflow (7 samples, 0.13%)</title><rect x="2.3705%" y="69" width="0.1286%" height="15" fill="rgb(206,188,39)" fg:x="129" fg:w="7"/><text x="2.6205%" y="79.50"></text></g><g><title>__GI__IO_file_sync (13 samples, 0.24%)</title><rect x="2.4991%" y="69" width="0.2389%" height="15" fill="rgb(217,207,13)" fg:x="136" fg:w="13"/><text x="2.7491%" y="79.50"></text></g><g><title>__GI___clone (2,180 samples, 40.06%)</title><rect x="2.7380%" y="69" width="40.0588%" height="15" fill="rgb(231,73,38)" fg:x="149" fg:w="2180"/><text x="2.9880%" y="79.50">__GI___clone</text></g><g><title>__GI___ctype_init (72 samples, 1.32%)</title><rect x="42.7968%" y="69" width="1.3230%" height="15" fill="rgb(225,20,46)" fg:x="2329" fg:w="72"/><text x="43.0468%" y="79.50"></text></g><g><title>__GI___getpagesize (3 samples, 0.06%)</title><rect x="44.1198%" y="69" width="0.0551%" height="15" fill="rgb(210,31,41)" fg:x="2401" fg:w="3"/><text x="44.3698%" y="79.50"></text></g><g><title>__GI___libc_free (12 samples, 0.22%)</title><rect x="44.1749%" y="69" width="0.2205%" height="15" fill="rgb(221,200,47)" fg:x="2404" fg:w="12"/><text x="44.4249%" y="79.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.13%)</title><rect x="44.3954%" y="69" width="0.1286%" height="15" fill="rgb(226,26,5)" fg:x="2416" fg:w="7"/><text x="44.6454%" y="79.50"></text></g><g><title>__GI___libc_write (13 samples, 0.24%)</title><rect x="44.5241%" y="69" width="0.2389%" height="15" fill="rgb(249,33,26)" fg:x="2423" fg:w="13"/><text x="44.7741%" y="79.50"></text></g><g><title>__GI___mmap64 (2 samples, 0.04%)</title><rect x="44.7630%" y="69" width="0.0368%" height="15" fill="rgb(235,183,28)" fg:x="2436" fg:w="2"/><text x="45.0130%" y="79.50"></text></g><g><title>__GI___overflow (4 samples, 0.07%)</title><rect x="44.7997%" y="69" width="0.0735%" height="15" fill="rgb(221,5,38)" fg:x="2438" fg:w="4"/><text x="45.0497%" y="79.50"></text></g><g><title>__GI___pthread_mutex_lock (43 samples, 0.79%)</title><rect x="44.8732%" y="69" width="0.7902%" height="15" fill="rgb(247,18,42)" fg:x="2442" fg:w="43"/><text x="45.1232%" y="79.50"></text></g><g><title>__GI___pthread_mutex_unlock (6 samples, 0.11%)</title><rect x="45.6634%" y="69" width="0.1103%" height="15" fill="rgb(241,131,45)" fg:x="2485" fg:w="6"/><text x="45.9134%" y="79.50"></text></g><g><title>__GI___pthread_once (1 samples, 0.02%)</title><rect x="45.7736%" y="69" width="0.0184%" height="15" fill="rgb(249,31,29)" fg:x="2491" fg:w="1"/><text x="46.0236%" y="79.50"></text></g><g><title>__GI___sigsetjmp (4 samples, 0.07%)</title><rect x="45.7920%" y="69" width="0.0735%" height="15" fill="rgb(225,111,53)" fg:x="2492" fg:w="4"/><text x="46.0420%" y="79.50"></text></g><g><title>__GI___strdup (4 samples, 0.07%)</title><rect x="45.8655%" y="69" width="0.0735%" height="15" fill="rgb(238,160,17)" fg:x="2496" fg:w="4"/><text x="46.1155%" y="79.50"></text></g><g><title>__GI___strftime_l (2 samples, 0.04%)</title><rect x="45.9390%" y="69" width="0.0368%" height="15" fill="rgb(214,148,48)" fg:x="2500" fg:w="2"/><text x="46.1890%" y="79.50"></text></g><g><title>__GI__dl_allocate_tls (1 samples, 0.02%)</title><rect x="45.9757%" y="69" width="0.0184%" height="15" fill="rgb(232,36,49)" fg:x="2502" fg:w="1"/><text x="46.2257%" y="79.50"></text></g><g><title>__GI__dl_allocate_tls_init (1 samples, 0.02%)</title><rect x="45.9941%" y="69" width="0.0184%" height="15" fill="rgb(209,103,24)" fg:x="2503" fg:w="1"/><text x="46.2441%" y="79.50"></text></g><g><title>__GI__setjmp (1 samples, 0.02%)</title><rect x="46.0125%" y="69" width="0.0184%" height="15" fill="rgb(229,88,8)" fg:x="2504" fg:w="1"/><text x="46.2625%" y="79.50"></text></g><g><title>__GI_fprintf (4 samples, 0.07%)</title><rect x="46.0309%" y="69" width="0.0735%" height="15" fill="rgb(213,181,19)" fg:x="2505" fg:w="4"/><text x="46.2809%" y="79.50"></text></g><g><title>__GI_getenv (19 samples, 0.35%)</title><rect x="46.1044%" y="69" width="0.3491%" height="15" fill="rgb(254,191,54)" fg:x="2509" fg:w="19"/><text x="46.3544%" y="79.50"></text></g><g><title>__GI_inet_ntop (1 samples, 0.02%)</title><rect x="46.4535%" y="69" width="0.0184%" height="15" fill="rgb(241,83,37)" fg:x="2528" fg:w="1"/><text x="46.7035%" y="79.50"></text></g><g><title>__GI_localtime (3 samples, 0.06%)</title><rect x="46.4719%" y="69" width="0.0551%" height="15" fill="rgb(233,36,39)" fg:x="2529" fg:w="3"/><text x="46.7219%" y="79.50"></text></g><g><title>__GI_strftime (12 samples, 0.22%)</title><rect x="46.5270%" y="69" width="0.2205%" height="15" fill="rgb(226,3,54)" fg:x="2532" fg:w="12"/><text x="46.7770%" y="79.50"></text></g><g><title>__calloc (4 samples, 0.07%)</title><rect x="46.7475%" y="69" width="0.0735%" height="15" fill="rgb(245,192,40)" fg:x="2544" fg:w="4"/><text x="46.9975%" y="79.50"></text></g><g><title>__dl_iterate_phdr (3 samples, 0.06%)</title><rect x="46.8210%" y="69" width="0.0551%" height="15" fill="rgb(238,167,29)" fg:x="2548" fg:w="3"/><text x="47.0710%" y="79.50"></text></g><g><title>__fstatat64 (4 samples, 0.07%)</title><rect x="46.8761%" y="69" width="0.0735%" height="15" fill="rgb(232,182,51)" fg:x="2551" fg:w="4"/><text x="47.1261%" y="79.50"></text></g><g><title>__libc_accept (10 samples, 0.18%)</title><rect x="46.9497%" y="69" width="0.1838%" height="15" fill="rgb(231,60,39)" fg:x="2555" fg:w="10"/><text x="47.1997%" y="79.50"></text></g><g><title>__libc_disable_asynccancel (3 samples, 0.06%)</title><rect x="47.1334%" y="69" width="0.0551%" height="15" fill="rgb(208,69,12)" fg:x="2565" fg:w="3"/><text x="47.3834%" y="79.50"></text></g><g><title>__libc_enable_asynccancel (8 samples, 0.15%)</title><rect x="47.1885%" y="69" width="0.1470%" height="15" fill="rgb(235,93,37)" fg:x="2568" fg:w="8"/><text x="47.4385%" y="79.50"></text></g><g><title>__libc_recv (116 samples, 2.13%)</title><rect x="47.3355%" y="69" width="2.1316%" height="15" fill="rgb(213,116,39)" fg:x="2576" fg:w="116"/><text x="47.5855%" y="79.50">_..</text></g><g><title>__libc_send (2 samples, 0.04%)</title><rect x="49.4671%" y="69" width="0.0368%" height="15" fill="rgb(222,207,29)" fg:x="2692" fg:w="2"/><text x="49.7171%" y="79.50"></text></g><g><title>__lll_lock_wait (1,687 samples, 31.00%)</title><rect x="49.5039%" y="69" width="30.9996%" height="15" fill="rgb(206,96,30)" fg:x="2694" fg:w="1687"/><text x="49.7539%" y="79.50">__lll_lock_wait</text></g><g><title>__lll_lock_wait_private (250 samples, 4.59%)</title><rect x="80.5035%" y="69" width="4.5939%" height="15" fill="rgb(218,138,4)" fg:x="4381" fg:w="250"/><text x="80.7535%" y="79.50">__lll..</text></g><g><title>__malloc_arena_thread_freeres (1 samples, 0.02%)</title><rect x="85.0974%" y="69" width="0.0184%" height="15" fill="rgb(250,191,14)" fg:x="4631" fg:w="1"/><text x="85.3474%" y="79.50"></text></g><g><title>__memcmp_avx2_movbe (10 samples, 0.18%)</title><rect x="85.1158%" y="69" width="0.1838%" height="15" fill="rgb(239,60,40)" fg:x="4632" fg:w="10"/><text x="85.3658%" y="79.50"></text></g><g><title>__memmove_avx_unaligned_erms (19 samples, 0.35%)</title><rect x="85.2995%" y="69" width="0.3491%" height="15" fill="rgb(206,27,48)" fg:x="4642" fg:w="19"/><text x="85.5495%" y="79.50"></text></g><g><title>__mempcpy_avx_unaligned_erms (8 samples, 0.15%)</title><rect x="85.6487%" y="69" width="0.1470%" height="15" fill="rgb(225,35,8)" fg:x="4661" fg:w="8"/><text x="85.8987%" y="79.50"></text></g><g><title>__memset_avx2_unaligned_erms (8 samples, 0.15%)</title><rect x="85.7957%" y="69" width="0.1470%" height="15" fill="rgb(250,213,24)" fg:x="4669" fg:w="8"/><text x="86.0457%" y="79.50"></text></g><g><title>__offtime (15 samples, 0.28%)</title><rect x="85.9427%" y="69" width="0.2756%" height="15" fill="rgb(247,123,22)" fg:x="4677" fg:w="15"/><text x="86.1927%" y="79.50"></text></g><g><title>__printf (6 samples, 0.11%)</title><rect x="86.2183%" y="69" width="0.1103%" height="15" fill="rgb(231,138,38)" fg:x="4692" fg:w="6"/><text x="86.4683%" y="79.50"></text></g><g><title>__pthread_cleanup_pop_restore (2 samples, 0.04%)</title><rect x="86.3286%" y="69" width="0.0368%" height="15" fill="rgb(231,145,46)" fg:x="4698" fg:w="2"/><text x="86.5786%" y="79.50"></text></g><g><title>__pthread_cleanup_push_defer (6 samples, 0.11%)</title><rect x="86.3653%" y="69" width="0.1103%" height="15" fill="rgb(251,118,11)" fg:x="4700" fg:w="6"/><text x="86.6153%" y="79.50"></text></g><g><title>__pthread_cleanup_upto (2 samples, 0.04%)</title><rect x="86.4756%" y="69" width="0.0368%" height="15" fill="rgb(217,147,25)" fg:x="4706" fg:w="2"/><text x="86.7256%" y="79.50"></text></g><g><title>__pthread_create_2_1 (15 samples, 0.28%)</title><rect x="86.5123%" y="69" width="0.2756%" height="15" fill="rgb(247,81,37)" fg:x="4708" fg:w="15"/><text x="86.7623%" y="79.50"></text></g><g><title>__pthread_disable_asynccancel (6 samples, 0.11%)</title><rect x="86.7879%" y="69" width="0.1103%" height="15" fill="rgb(209,12,38)" fg:x="4723" fg:w="6"/><text x="87.0379%" y="79.50"></text></g><g><title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="86.8982%" y="69" width="0.0184%" height="15" fill="rgb(227,1,9)" fg:x="4729" fg:w="1"/><text x="87.1482%" y="79.50"></text></g><g><title>__pthread_exit (3 samples, 0.06%)</title><rect x="86.9166%" y="69" width="0.0551%" height="15" fill="rgb(248,47,43)" fg:x="4730" fg:w="3"/><text x="87.1666%" y="79.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (17 samples, 0.31%)</title><rect x="86.9717%" y="69" width="0.3124%" height="15" fill="rgb(221,10,30)" fg:x="4733" fg:w="17"/><text x="87.2217%" y="79.50"></text></g><g><title>__res_thread_freeres (1 samples, 0.02%)</title><rect x="87.2841%" y="69" width="0.0184%" height="15" fill="rgb(210,229,1)" fg:x="4750" fg:w="1"/><text x="87.5341%" y="79.50"></text></g><g><title>__resolv_context_freeres (2 samples, 0.04%)</title><rect x="87.3025%" y="69" width="0.0368%" height="15" fill="rgb(222,148,37)" fg:x="4751" fg:w="2"/><text x="87.5525%" y="79.50"></text></g><g><title>__strchrnul_avx2 (30 samples, 0.55%)</title><rect x="87.3392%" y="69" width="0.5513%" height="15" fill="rgb(234,67,33)" fg:x="4753" fg:w="30"/><text x="87.5892%" y="79.50"></text></g><g><title>__strcmp_avx2 (15 samples, 0.28%)</title><rect x="87.8905%" y="69" width="0.2756%" height="15" fill="rgb(247,98,35)" fg:x="4783" fg:w="15"/><text x="88.1405%" y="79.50"></text></g><g><title>__strftime_internal (63 samples, 1.16%)</title><rect x="88.1661%" y="69" width="1.1577%" height="15" fill="rgb(247,138,52)" fg:x="4798" fg:w="63"/><text x="88.4161%" y="79.50"></text></g><g><title>__strlen_avx2 (13 samples, 0.24%)</title><rect x="89.3238%" y="69" width="0.2389%" height="15" fill="rgb(213,79,30)" fg:x="4861" fg:w="13"/><text x="89.5738%" y="79.50"></text></g><g><title>__strncpy_avx2 (3 samples, 0.06%)</title><rect x="89.5627%" y="69" width="0.0551%" height="15" fill="rgb(246,177,23)" fg:x="4874" fg:w="3"/><text x="89.8127%" y="79.50"></text></g><g><title>__tz_convert (19 samples, 0.35%)</title><rect x="89.6178%" y="69" width="0.3491%" height="15" fill="rgb(230,62,27)" fg:x="4877" fg:w="19"/><text x="89.8678%" y="79.50"></text></g><g><title>__tzfile_compute (19 samples, 0.35%)</title><rect x="89.9669%" y="69" width="0.3491%" height="15" fill="rgb(216,154,8)" fg:x="4896" fg:w="19"/><text x="90.2169%" y="79.50"></text></g><g><title>__tzfile_read (8 samples, 0.15%)</title><rect x="90.3161%" y="69" width="0.1470%" height="15" fill="rgb(244,35,45)" fg:x="4915" fg:w="8"/><text x="90.5661%" y="79.50"></text></g><g><title>__tzstring (1 samples, 0.02%)</title><rect x="90.4631%" y="69" width="0.0184%" height="15" fill="rgb(251,115,12)" fg:x="4923" fg:w="1"/><text x="90.7131%" y="79.50"></text></g><g><title>__tzstring_len (4 samples, 0.07%)</title><rect x="90.4814%" y="69" width="0.0735%" height="15" fill="rgb(240,54,50)" fg:x="4924" fg:w="4"/><text x="90.7314%" y="79.50"></text></g><g><title>__vdso_time (11 samples, 0.20%)</title><rect x="90.5549%" y="69" width="0.2021%" height="15" fill="rgb(233,84,52)" fg:x="4928" fg:w="11"/><text x="90.8049%" y="79.50"></text></g><g><title>__vfprintf (3 samples, 0.06%)</title><rect x="90.7571%" y="69" width="0.0551%" height="15" fill="rgb(207,117,47)" fg:x="4939" fg:w="3"/><text x="91.0071%" y="79.50"></text></g><g><title>__vfprintf_internal (118 samples, 2.17%)</title><rect x="90.8122%" y="69" width="2.1683%" height="15" fill="rgb(249,43,39)" fg:x="4942" fg:w="118"/><text x="91.0622%" y="79.50">_..</text></g><g><title>__vprintf (3 samples, 0.06%)</title><rect x="92.9805%" y="69" width="0.0551%" height="15" fill="rgb(209,38,44)" fg:x="5060" fg:w="3"/><text x="93.2305%" y="79.50"></text></g><g><title>_int_free (9 samples, 0.17%)</title><rect x="93.0356%" y="69" width="0.1654%" height="15" fill="rgb(236,212,23)" fg:x="5063" fg:w="9"/><text x="93.2856%" y="79.50"></text></g><g><title>_int_malloc (7 samples, 0.13%)</title><rect x="93.2010%" y="69" width="0.1286%" height="15" fill="rgb(242,79,21)" fg:x="5072" fg:w="7"/><text x="93.4510%" y="79.50"></text></g><g><title>_itoa_word (7 samples, 0.13%)</title><rect x="93.3297%" y="69" width="0.1286%" height="15" fill="rgb(211,96,35)" fg:x="5079" fg:w="7"/><text x="93.5797%" y="79.50"></text></g><g><title>_start (5 samples, 0.09%)</title><rect x="93.4583%" y="69" width="0.0919%" height="15" fill="rgb(253,215,40)" fg:x="5086" fg:w="5"/><text x="93.7083%" y="79.50"></text></g><g><title>dispatch (19 samples, 0.35%)</title><rect x="93.5502%" y="69" width="0.3491%" height="15" fill="rgb(211,81,21)" fg:x="5091" fg:w="19"/><text x="93.8002%" y="79.50"></text></g><g><title>execute_cfa_program (11 samples, 0.20%)</title><rect x="93.8993%" y="69" width="0.2021%" height="15" fill="rgb(208,190,38)" fg:x="5110" fg:w="11"/><text x="94.1493%" y="79.50"></text></g><g><title>read_uleb128 (3 samples, 0.06%)</title><rect x="94.0463%" y="53" width="0.0551%" height="15" fill="rgb(235,213,38)" fg:x="5118" fg:w="3"/><text x="94.2963%" y="63.50"></text></g><g><title>fflush@plt (1 samples, 0.02%)</title><rect x="94.1014%" y="69" width="0.0184%" height="15" fill="rgb(237,122,38)" fg:x="5121" fg:w="1"/><text x="94.3514%" y="79.50"></text></g><g><title>file_callback (7 samples, 0.13%)</title><rect x="94.1198%" y="69" width="0.1286%" height="15" fill="rgb(244,218,35)" fg:x="5122" fg:w="7"/><text x="94.3698%" y="79.50"></text></g><g><title>fprintf@plt (4 samples, 0.07%)</title><rect x="94.2484%" y="69" width="0.0735%" height="15" fill="rgb(240,68,47)" fg:x="5129" fg:w="4"/><text x="94.4984%" y="79.50"></text></g><g><title>fputc (6 samples, 0.11%)</title><rect x="94.3219%" y="69" width="0.1103%" height="15" fill="rgb(210,16,53)" fg:x="5133" fg:w="6"/><text x="94.5719%" y="79.50"></text></g><g><title>fputc@plt (2 samples, 0.04%)</title><rect x="94.4322%" y="69" width="0.0368%" height="15" fill="rgb(235,124,12)" fg:x="5139" fg:w="2"/><text x="94.6822%" y="79.50"></text></g><g><title>get_free_list (3 samples, 0.06%)</title><rect x="94.4689%" y="69" width="0.0551%" height="15" fill="rgb(224,169,11)" fg:x="5141" fg:w="3"/><text x="94.7189%" y="79.50"></text></g><g><title>handle_monitor (5 samples, 0.09%)</title><rect x="94.5241%" y="69" width="0.0919%" height="15" fill="rgb(250,166,2)" fg:x="5144" fg:w="5"/><text x="94.7741%" y="79.50"></text></g><g><title>handle_monitor_message (46 samples, 0.85%)</title><rect x="94.6160%" y="69" width="0.8453%" height="15" fill="rgb(242,216,29)" fg:x="5149" fg:w="46"/><text x="94.8660%" y="79.50"></text></g><g><title>ll_insert (26 samples, 0.48%)</title><rect x="95.4612%" y="69" width="0.4778%" height="15" fill="rgb(230,116,27)" fg:x="5195" fg:w="26"/><text x="95.7112%" y="79.50"></text></g><g><title>ll_size (14 samples, 0.26%)</title><rect x="95.9390%" y="69" width="0.2573%" height="15" fill="rgb(228,99,48)" fg:x="5221" fg:w="14"/><text x="96.1890%" y="79.50"></text></g><g><title>localtime@plt (1 samples, 0.02%)</title><rect x="96.1963%" y="69" width="0.0184%" height="15" fill="rgb(253,11,6)" fg:x="5235" fg:w="1"/><text x="96.4463%" y="79.50"></text></g><g><title>log_info (13 samples, 0.24%)</title><rect x="96.2146%" y="69" width="0.2389%" height="15" fill="rgb(247,143,39)" fg:x="5236" fg:w="13"/><text x="96.4646%" y="79.50"></text></g><g><title>mempcpy (1 samples, 0.02%)</title><rect x="96.4535%" y="69" width="0.0184%" height="15" fill="rgb(236,97,10)" fg:x="5249" fg:w="1"/><text x="96.7035%" y="79.50"></text></g><g><title>memset (1 samples, 0.02%)</title><rect x="96.4719%" y="69" width="0.0184%" height="15" fill="rgb(233,208,19)" fg:x="5250" fg:w="1"/><text x="96.7219%" y="79.50"></text></g><g><title>new_do_write (14 samples, 0.26%)</title><rect x="96.4903%" y="69" width="0.2573%" height="15" fill="rgb(216,164,2)" fg:x="5251" fg:w="14"/><text x="96.7403%" y="79.50"></text></g><g><title>new_heap (1 samples, 0.02%)</title><rect x="96.7475%" y="69" width="0.0184%" height="15" fill="rgb(220,129,5)" fg:x="5265" fg:w="1"/><text x="96.9975%" y="79.50"></text></g><g><title>printf@plt (1 samples, 0.02%)</title><rect x="96.7659%" y="69" width="0.0184%" height="15" fill="rgb(242,17,10)" fg:x="5266" fg:w="1"/><text x="97.0159%" y="79.50"></text></g><g><title>pthread_mutex_lock@plt (6 samples, 0.11%)</title><rect x="96.7843%" y="69" width="0.1103%" height="15" fill="rgb(242,107,0)" fg:x="5267" fg:w="6"/><text x="97.0343%" y="79.50"></text></g><g><title>pthread_mutex_unlock@plt (1 samples, 0.02%)</title><rect x="96.8945%" y="69" width="0.0184%" height="15" fill="rgb(251,28,31)" fg:x="5273" fg:w="1"/><text x="97.1445%" y="79.50"></text></g><g><title>putchar (7 samples, 0.13%)</title><rect x="96.9129%" y="69" width="0.1286%" height="15" fill="rgb(233,223,10)" fg:x="5274" fg:w="7"/><text x="97.1629%" y="79.50"></text></g><g><title>putchar@plt (4 samples, 0.07%)</title><rect x="97.0415%" y="69" width="0.0735%" height="15" fill="rgb(215,21,27)" fg:x="5281" fg:w="4"/><text x="97.2915%" y="79.50"></text></g><g><title>read_encoded_value_with_base (5 samples, 0.09%)</title><rect x="97.1150%" y="69" width="0.0919%" height="15" fill="rgb(232,23,21)" fg:x="5285" fg:w="5"/><text x="97.3650%" y="79.50"></text></g><g><title>start_thread (119 samples, 2.19%)</title><rect x="97.2069%" y="69" width="2.1867%" height="15" fill="rgb(244,5,23)" fg:x="5290" fg:w="119"/><text x="97.4569%" y="79.50">s..</text></g><g><title>stdout_callback (10 samples, 0.18%)</title><rect x="99.3936%" y="69" width="0.1838%" height="15" fill="rgb(226,81,46)" fg:x="5409" fg:w="10"/><text x="99.6436%" y="79.50"></text></g><g><title>strcmp@plt (2 samples, 0.04%)</title><rect x="99.5774%" y="69" width="0.0368%" height="15" fill="rgb(247,70,30)" fg:x="5419" fg:w="2"/><text x="99.8274%" y="79.50"></text></g><g><title>strftime@plt (1 samples, 0.02%)</title><rect x="99.6141%" y="69" width="0.0184%" height="15" fill="rgb(212,68,19)" fg:x="5421" fg:w="1"/><text x="99.8641%" y="79.50"></text></g><g><title>strlen (1 samples, 0.02%)</title><rect x="99.6325%" y="69" width="0.0184%" height="15" fill="rgb(240,187,13)" fg:x="5422" fg:w="1"/><text x="99.8825%" y="79.50"></text></g><g><title>tzset_internal (5 samples, 0.09%)</title><rect x="99.6509%" y="69" width="0.0919%" height="15" fill="rgb(223,113,26)" fg:x="5423" fg:w="5"/><text x="99.9009%" y="79.50"></text></g><g><title>extract_cie_info (1 samples, 0.02%)</title><rect x="99.7611%" y="53" width="0.0184%" height="15" fill="rgb(206,192,2)" fg:x="5429" fg:w="1"/><text x="100.0111%" y="63.50"></text></g><g><title>uw_frame_state_for (3 samples, 0.06%)</title><rect x="99.7427%" y="69" width="0.0551%" height="15" fill="rgb(241,108,4)" fg:x="5428" fg:w="3"/><text x="99.9927%" y="79.50"></text></g><g><title>size_of_encoded_value (1 samples, 0.02%)</title><rect x="99.7795%" y="53" width="0.0184%" height="15" fill="rgb(247,173,49)" fg:x="5430" fg:w="1"/><text x="100.0295%" y="63.50"></text></g><g><title>uw_init_context_1 (1 samples, 0.02%)</title><rect x="99.7979%" y="69" width="0.0184%" height="15" fill="rgb(224,114,35)" fg:x="5431" fg:w="1"/><text x="100.0479%" y="79.50"></text></g><g><title>uw_update_context_1 (8 samples, 0.15%)</title><rect x="99.8162%" y="69" width="0.1470%" height="15" fill="rgb(245,159,27)" fg:x="5432" fg:w="8"/><text x="100.0662%" y="79.50"></text></g><g><title>all (5,442 samples, 100%)</title><rect x="0.0000%" y="101" width="100.0000%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="5442"/><text x="0.2500%" y="111.50"></text></g><g><title>server (5,442 samples, 100.00%)</title><rect x="0.0000%" y="85" width="100.0000%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="5442"/><text x="0.2500%" y="95.50">server</text></g><g><title>vprintf@plt (2 samples, 0.04%)</title><rect x="99.9632%" y="69" width="0.0368%" height="15" fill="rgb(205,117,38)" fg:x="5440" fg:w="2"/><text x="100.2132%" y="79.50"></text></g></svg></svg>